name: Compare TSC Error Counts
description: Compare the TypeScript error counts on the HEAD branch vs. the base branch.
author: ThinkDX
inputs:
  packages:
    description: |
      A multi-line string listing subdirectories to run TSC in.
      If left blank, TSC is run only once from the repository root.
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Check out HEAD
      uses: actions/checkout@v3
      with:
        # Pull Request context: we want to check out the PR head commit
        ref: ${{ github.event.pull_request.head.sha }}
        
    - name: Install dependencies (HEAD)
      shell: bash
      run: npm ci

    - name: Collect typescript errors on HEAD
      id: head_errors
      shell: bash
      run: |
        PACKAGES="${{ inputs.packages }}"
        TOTAL_HEAD_ERRORS=0

        run_tsc_and_get_errors() {
          local OUTPUT
          local COUNT

          # Run TSC and capture output
          OUTPUT=$(npx tsc --pretty --noEmit --strict 2>&1 || true)

          # Parse the error count from the lines that match any of these forms:
          # - "Found 1 error in {0}"
          # - "Found {0} errors in the same file, starting at: {1}"
          # - "Found {0} errors in {1} files."
          # 
          # We'll look for "Found X error" or "Found X errors" then skip the rest
          COUNT=$(echo "$OUTPUT" | grep -Eo "Found ([0-9]+) error(s?)" | grep -Eo "[0-9]+" | head -n1 || echo "")

          # If we didn't find anything, default to 0
          if [ -z "$COUNT" ]; then
            COUNT=0
          fi

          echo "$COUNT"
        }

        if [ -z "$PACKAGES" ]; then
          echo "No packages specified. Running TSC in root..."
          ERRORS=$(run_tsc_and_get_errors)
          TOTAL_HEAD_ERRORS=$(( TOTAL_HEAD_ERRORS + ERRORS ))
        else
          echo "Packages provided. Running TSC in each subdirectory..."
          while read -r PKG; do
            echo "Running TSC in $PKG ..."
            pushd "$PKG" > /dev/null
            ERRORS=$(run_tsc_and_get_errors)
            TOTAL_HEAD_ERRORS=$(( TOTAL_HEAD_ERRORS + ERRORS ))
            popd > /dev/null
          done <<< "$PACKAGES"
        fi

        echo "Total HEAD errors: $TOTAL_HEAD_ERRORS"
        echo "head_errors=$TOTAL_HEAD_ERRORS" >> $GITHUB_OUTPUT

    - name: Check out base
      uses: actions/checkout@v3
      with:
        # Pull Request context: base commit
        ref: ${{ github.event.pull_request.base.sha }}
        
    - name: Install dependencies (BASE)
      shell: bash
      run: npm ci

    - name: Run tsc on BASE
      id: base_errors
      shell: bash
      run: |
        PACKAGES="${{ inputs.packages }}"
        TOTAL_BASE_ERRORS=0

        run_tsc_and_get_errors() {
          local OUTPUT
          local COUNT

          # Run TSC and capture output
          OUTPUT=$(npx tsc --pretty --noEmit --strict 2>&1 || true)

          # Parse the error count from the lines that match any of these forms:
          # - "Found 1 error in {0}"
          # - "Found {0} errors in the same file, starting at: {1}"
          # - "Found {0} errors in {1} files."
          # 
          # We'll look for "Found X error" or "Found X errors" then skip the rest
          COUNT=$(echo "$OUTPUT" | grep -Eo "Found ([0-9]+) error(s?)" | grep -Eo "[0-9]+" | head -n1 || echo "")

          # If we didn't find anything, default to 0
          if [ -z "$COUNT" ]; then
            COUNT=0
          fi

          echo "$COUNT"
        }

        if [ -z "$PACKAGES" ]; then
          echo "No packages specified. Running TSC in root..."
          ERRORS=$(run_tsc_and_get_errors)
          TOTAL_BASE_ERRORS=$(( TOTAL_BASE_ERRORS + ERRORS ))
        else
          echo "Packages provided. Running TSC in each subdirectory..."
          while read -r PKG; do
            echo "Running TSC in $PKG ..."
            pushd "$PKG" > /dev/null
            ERRORS=$(run_tsc_and_get_errors)
            TOTAL_BASE_ERRORS=$(( TOTAL_BASE_ERRORS + ERRORS ))
            popd > /dev/null
          done <<< "$PACKAGES"
        fi

        echo "Total BASE errors: $TOTAL_BASE_ERRORS"
        echo "base_errors=$TOTAL_BASE_ERRORS" >> $GITHUB_OUTPUT

    - name: Compare error counts
      shell: bash
      run: |
        # Fetch the outputs from previous steps
        HEAD_ERRORS="${{ steps.head_errors.outputs.head_errors }}"
        BASE_ERRORS="${{ steps.base_errors.outputs.base_errors }}"

        echo "HEAD Errors: $HEAD_ERRORS"
        echo "Base Errors: $BASE_ERRORS"

        # Fail if HEAD error count is greater than BASE error count
        if [ "$HEAD_ERRORS" -gt "$BASE_ERRORS" ]; then
          echo "❌ TSC error count ($HEAD_ERRORS) is greater than base branch ($BASE_ERRORS). Failing..."
          exit 1
        else
          echo "✅ TSC error count ($HEAD_ERRORS) is not greater than base branch ($BASE_ERRORS). Passing..."
        fi
